// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:





    //Decode
    
    DMux(in=true, sel=instruction[15], a=addrinst, b=compinst);
    And16(a=instruction, b=true, out[0]=cj3, out[1]=cj2, out[2]=cj1, out[3]=cd3, out[4]=cd2, out[5]=cd1, out[6]=no, out[7]=f, out[8]=ny, out[9]=zy, out[10]=nx, out[11]=zx, out[12]=ca, out[0..14]=aaddr);

    //A Register
    Mux16(a=outALU, b=instruction, sel=addrinst, out=inA);
    Or(a=cd1, b=addrinst, out=loadA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);

    //DRegister
    And(a=cd2, b=compinst, out=loadD);
    DRegister(in=outALU,load=loadD,out=xALU);

    //ALU
    Mux16(a=outA, b=inM, sel=ca, out=yALU);
    ALU(x=xALU, y=yALU, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outALU, out=outM, zr=zr ,ng=ng );
    And(a=cd3, b=compinst, out=writeM);


    //JUMP
        //positive output
        Or(a=zr, b=ng, out=zrORng);
        Not(in=zrORng, out=ispositive);

        And(a=cj1, b=ng, out=JLT);
        And(a=cj2, b=zr, out=JEQ);
        And(a=cj3, b=ispositive, out=JGT);

        Or(a=JLT, b=JEQ, out=jmp1);
        Or(a=jmp1, b=JGT, out=jmp2);
        And(a=jmp2, b=compinst, out=jmp);

    //PC
    Not(in=jmp, out=inc);
    PC(in=outA, load=jmp, inc=inc, reset=reset, out[0..14]=pc);


}